# .github/workflows/gaming-tracker-advanced.yml
name: Steam Gaming Tracker - Production

on:
  schedule:
    # Updates 7 times a day!
    - cron: '0 0 * * *'   # 00:00 UTC
    - cron: '25 3 * * *'  # 03:25 UTC
    - cron: '50 6 * * *'  # 06:50 UTC
    - cron: '15 10 * * *' # 10:15 UTC
    - cron: '40 13 * * *' # 13:40 UTC
    - cron: '5 17 * * *'  # 17:05 UTC
    - cron: '30 20 * * *' # 20:30 UTC
  workflow_dispatch:
    inputs:
      include_achievements:
        description: 'Include achievement processing (slower)'
        required: false
        default: 'true'
        type: boolean
      force_full_sync:
        description: 'Force full sync (ignore cache)'
        required: false
        default: 'false'
        type: boolean

jobs:
  sync-gaming-data:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Prevent infinite runs
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Shallow clone for performance
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
        
    - name: Cache game data
      uses: actions/cache@v3
      with:
        path: |
          gaming_sessions.json
          game_cache.json
        key: gaming-data-${{ runner.os }}-${{ hashFiles('gaming_sessions.json') }}
        restore-keys: |
          gaming-data-${{ runner.os }}-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          curl \
          ca-certificates
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install -r requirements.txt
        
    - name: Validate environment
      env:
        STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
        STEAM_ID: ${{ secrets.STEAM_ID }}
        NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
        NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
      run: |
        python -c "
        import os
        required_vars = ['STEAM_API_KEY', 'STEAM_ID', 'NOTION_TOKEN', 'NOTION_DATABASE_ID']
        missing = [var for var in required_vars if not os.getenv(var)]
        if missing:
            raise ValueError(f'Missing required environment variables: {missing}')
        print('✅ All environment variables configured')
        "
        
    - name: Run gaming tracker
      env:
        STEAM_API_KEY: ${{ secrets.STEAM_API_KEY }}
        STEAM_ID: ${{ secrets.STEAM_ID }}
        NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
        NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        INCLUDE_ACHIEVEMENTS: ${{ inputs.include_achievements || 'true' }}
        FORCE_FULL_SYNC: ${{ inputs.force_full_sync || 'false' }}
        PYTHONUNBUFFERED: '1'  # Force immediate output
      run: |
        # Use the actual script name and ensure logging
        python gaming_tracker.py --batch-mode --log-level INFO 2>&1 | tee gaming_tracker.log
        
        # Verify execution completed
        echo "Execution completed at $(date)" | tee -a gaming_tracker.log
        
    - name: Generate performance report
      if: always()
      run: |
        echo "## Gaming Tracker Performance Report" >> $GITHUB_STEP_SUMMARY
        echo "### Execution Summary" >> $GITHUB_STEP_SUMMARY
        
        # Check if log file exists first
        if [ -f "gaming_tracker.log" ]; then
          echo "- **Execution Time**: $(grep -i 'completed\|took\|elapsed' gaming_tracker.log | tail -1 || echo 'Processing completed')" >> $GITHUB_STEP_SUMMARY
          echo "- **Games Processed**: $(grep -i 'games\|processed\|total' gaming_tracker.log | tail -1 || echo 'See detailed logs')" >> $GITHUB_STEP_SUMMARY
          echo "- **API Calls Made**: $(grep -c -i 'api\|request\|call' gaming_tracker.log || echo 'Multiple API interactions')" >> $GITHUB_STEP_SUMMARY
          echo "- **Log Size**: $(wc -l < gaming_tracker.log 2>/dev/null || echo '0') lines" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Status**: Script executed without detailed logging" >> $GITHUB_STEP_SUMMARY
          echo "- **Note**: Log file not generated - check script configuration" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Show file structure for debugging
        echo "### Generated Files" >> $GITHUB_STEP_SUMMARY
        ls -la *.json *.log *.csv 2>/dev/null | head -10 >> $GITHUB_STEP_SUMMARY || echo "No output files detected" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload artifacts and logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gaming-tracker-results-${{ github.run_number }}
        path: |
          gaming_report_*.json
          gaming_sessions.json
          gaming_tracker.log
          *.csv
        retention-days: 14
        
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number || 1,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🚨 Gaming tracker sync failed! 
            
            **Run ID**: ${context.runId}
            **Commit**: ${context.sha.slice(0, 7)}
            **Logs**: Check the Actions tab for detailed error information.`
          });
          
  health-check:
    needs: sync-gaming-data
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check sync health
      run: |
        if [[ "${{ needs.sync-gaming-data.result }}" == "success" ]]; then
          echo "✅ Gaming tracker sync completed successfully"
          echo "HEALTH_STATUS=healthy" >> $GITHUB_ENV
        else
          echo "❌ Gaming tracker sync failed"
          echo "HEALTH_STATUS=unhealthy" >> $GITHUB_ENV
        fi
        
    - name: Update repository status
      uses: actions/github-script@v7
      with:
        script: |
          const status = process.env.HEALTH_STATUS;
          const badge_color = status === 'healthy' ? 'brightgreen' : 'red';
          
          // Update README badge or create status file
          console.log(`Gaming Tracker Status: ${status}`);
          console.log(`Badge Color: ${badge_color}`);
